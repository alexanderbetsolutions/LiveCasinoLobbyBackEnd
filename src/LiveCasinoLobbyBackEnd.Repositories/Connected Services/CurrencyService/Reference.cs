//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CurrencyService
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CurrencyModel", Namespace="http://schemas.datacontract.org/2004/07/DatabaseService.Core.Models.Currency")]
    public partial class CurrencyModel : object
    {
        
        private string CodeField;
        
        private int IdField;
        
        private string NameField;
        
        private string SymbolField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string Code
        {
            get
            {
                return this.CodeField;
            }
            set
            {
                this.CodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string Symbol
        {
            get
            {
                return this.SymbolField;
            }
            set
            {
                this.SymbolField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CurrencyRateModel", Namespace="http://schemas.datacontract.org/2004/07/DatabaseService.Core.Models.Currency")]
    public partial class CurrencyRateModel : object
    {
        
        private int FromCurrencyIdField;
        
        private int IdField;
        
        private decimal RateField;
        
        private int ToCurrencyIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal int FromCurrencyId
        {
            get
            {
                return this.FromCurrencyIdField;
            }
            set
            {
                this.FromCurrencyIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal decimal Rate
        {
            get
            {
                return this.RateField;
            }
            set
            {
                this.RateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal int ToCurrencyId
        {
            get
            {
                return this.ToCurrencyIdField;
            }
            set
            {
                this.ToCurrencyIdField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CurrencyService.ICurrencyService")]
    public interface ICurrencyService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyService/GetCurrencies", ReplyAction="http://tempuri.org/ICurrencyService/GetCurrenciesResponse")]
        System.Threading.Tasks.Task<CurrencyService.CurrencyModel[]> GetCurrenciesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyService/InsertCurrencyRates", ReplyAction="http://tempuri.org/ICurrencyService/InsertCurrencyRatesResponse")]
        System.Threading.Tasks.Task<bool> InsertCurrencyRatesAsync(CurrencyService.CurrencyRateModel[] rates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyService/GetCurrencyRates", ReplyAction="http://tempuri.org/ICurrencyService/GetCurrencyRatesResponse")]
        System.Threading.Tasks.Task<CurrencyService.CurrencyRateModel[]> GetCurrencyRatesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface ICurrencyServiceChannel : CurrencyService.ICurrencyService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class CurrencyServiceClient : System.ServiceModel.ClientBase<CurrencyService.ICurrencyService>, CurrencyService.ICurrencyService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public CurrencyServiceClient() : 
                base(CurrencyServiceClient.GetDefaultBinding(), CurrencyServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ICurrencyService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CurrencyServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(CurrencyServiceClient.GetBindingForEndpoint(endpointConfiguration), CurrencyServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CurrencyServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(CurrencyServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CurrencyServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(CurrencyServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CurrencyServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<CurrencyService.CurrencyModel[]> GetCurrenciesAsync()
        {
            return base.Channel.GetCurrenciesAsync();
        }
        
        public System.Threading.Tasks.Task<bool> InsertCurrencyRatesAsync(CurrencyService.CurrencyRateModel[] rates)
        {
            return base.Channel.InsertCurrencyRatesAsync(rates);
        }
        
        public System.Threading.Tasks.Task<CurrencyService.CurrencyRateModel[]> GetCurrencyRatesAsync()
        {
            return base.Channel.GetCurrencyRatesAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ICurrencyService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ICurrencyService))
            {
                return new System.ServiceModel.EndpointAddress("http://178.63.71.57:1881/CurrencyService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return CurrencyServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ICurrencyService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return CurrencyServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ICurrencyService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_ICurrencyService,
        }
    }
}
